{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _readOnlyError from \"@babel/runtime/helpers/readOnlyError\";\nimport { useState } from \"react\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Button, Text } from \"react-native-elements\";\nimport { styles } from \"../App\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction RestartQuiz(setQuizState) {\n  var _useState$false = _slicedToArray(useState[false], 2),\n    confirmRestart = _useState$false[0],\n    setConfirmRestart = _useState$false[1];\n  var handleRestart = function handleRestart() {\n    true, _readOnlyError(\"setConfirmRestart\");\n  };\n  var handleConfirmRestart = function handleConfirmRestart(confirmed) {\n    if (confirmed) {\n      setQuizState({\n        currentQuestions: 0,\n        userChoices: userChoices,\n        showSummary: false\n      });\n      false, _readOnlyError(\"setConfirmRestart\");\n    }\n    return _jsxs(View, {\n      style: styles.container,\n      children: [_jsxs(Modal, {\n        children: [\"visible=\", confirmRestart, \"animationType=\\\"slide\\\" transparent=\", true, \"onRequestClose=\", function () {\n          return handleConfirmRestart(false);\n        }, _jsx(View, {\n          style: {\n            flex: 1,\n            justifyContent: center,\n            alignItems: center\n          },\n          children: _jsxs(View, {\n            style: {\n              backgroundColor: 'white',\n              padding: 20\n            },\n            children: [_jsx(Text, {\n              style: {\n                marginBottom: 10\n              },\n              children: \"Are you sure you want to restart the quiz?\"\n            }), _jsx(Button, {\n              title: \"Yes\",\n              onPress: function onPress() {\n                return handleConfirmRestart(true);\n              }\n            }), _jsx(Button, {\n              title: \"No\",\n              onPress: function onPress() {\n                return handleConfirmRestart(false);\n              }\n            })]\n          })\n        })]\n      }), _jsx(Button, {\n        title: \"Restart Quiz\",\n        onPress: handleRestart\n      })]\n    });\n  };\n}\nexport default RestartQuiz;","map":{"version":3,"names":["useState","Modal","View","Button","Text","styles","jsx","_jsx","jsxs","_jsxs","RestartQuiz","setQuizState","_useState$false","_slicedToArray","confirmRestart","setConfirmRestart","handleRestart","_readOnlyError","handleConfirmRestart","confirmed","currentQuestions","userChoices","showSummary","style","container","children","flex","justifyContent","center","alignItems","backgroundColor","padding","marginBottom","title","onPress"],"sources":["/Users/katverret/Documents/quizApp/components/RestartQuiz.js"],"sourcesContent":["\nimport { useState } from \"react\";\nimport { Modal, View } from \"react-native\";\nimport { Button, Text } from \"react-native-elements\";\nimport { styles } from \"../App\";\n\nfunction RestartQuiz(setQuizState) {\n    const [confirmRestart, setConfirmRestart] = useState[false];\n\n    let handleRestart = () => {\n        setConfirmRestart = true;\n    }\n\n    let handleConfirmRestart = (confirmed) => {\n        if (confirmed) {\n            setQuizState({\n                currentQuestions: 0,\n                userChoices,\n                showSummary: false\n            })\n            setConfirmRestart = false;\n        }\n\n            return (\n                <View style={styles.container}>\n                    <Modal>\n                        visible={confirmRestart}\n                        animationType=\"slide\"\n                        transparent={true}\n                        onRequestClose={() => handleConfirmRestart(false)}\n                        <View style={{ flex: 1, justifyContent: center, alignItems: center }}>\n                            <View style={{ backgroundColor: 'white', padding: 20 }}>\n                                <Text style={{ marginBottom: 10 }}>Are you sure you want to restart the quiz?</Text>\n                                <Button title=\"Yes\" onPress={() => handleConfirmRestart(true)} />\n                                <Button title=\"No\" onPress={() => handleConfirmRestart(false)} />\n                            </View>\n                        </View>\n                    </Modal>\n                    <Button title=\"Restart Quiz\" onPress={handleRestart} />\n                </View>\n            )\n        }\n    }\n\nexport default RestartQuiz;"],"mappings":";;AACA,SAASA,QAAQ,QAAQ,OAAO;AAAC,OAAAC,KAAA;AAAA,OAAAC,IAAA;AAEjC,SAASC,MAAM,EAAEC,IAAI,QAAQ,uBAAuB;AACpD,SAASC,MAAM;AAAiB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEhC,SAASC,WAAWA,CAACC,YAAY,EAAE;EAC/B,IAAAC,eAAA,GAAAC,cAAA,CAA4Cb,QAAQ,CAAC,KAAK,CAAC;IAApDc,cAAc,GAAAF,eAAA;IAAEG,iBAAiB,GAAAH,eAAA;EAExC,IAAII,aAAa,GAAG,SAAhBA,aAAaA,CAAA,EAAS;IACF,IAAI,EAAAC,cAAA;EAC5B,CAAC;EAED,IAAIC,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAIC,SAAS,EAAK;IACtC,IAAIA,SAAS,EAAE;MACXR,YAAY,CAAC;QACTS,gBAAgB,EAAE,CAAC;QACnBC,WAAW,EAAXA,WAAW;QACXC,WAAW,EAAE;MACjB,CAAC,CAAC;MACkB,KAAK,EAAAL,cAAA;IAC7B;IAEI,OACIR,KAAA,CAACP,IAAI;MAACqB,KAAK,EAAElB,MAAM,CAACmB,SAAU;MAAAC,QAAA,GAC1BhB,KAAA,CAACR,KAAK;QAAAwB,QAAA,GAAC,UACK,EAACX,cAAc,EAAC,sCAEZ,EAAC,IAAI,EAAC,iBACH,EAAC;UAAA,OAAMI,oBAAoB,CAAC,KAAK,CAAC;QAAA,GACjDX,IAAA,CAACL,IAAI;UAACqB,KAAK,EAAE;YAAEG,IAAI,EAAE,CAAC;YAAEC,cAAc,EAAEC,MAAM;YAAEC,UAAU,EAAED;UAAO,CAAE;UAAAH,QAAA,EACjEhB,KAAA,CAACP,IAAI;YAACqB,KAAK,EAAE;cAAEO,eAAe,EAAE,OAAO;cAAEC,OAAO,EAAE;YAAG,CAAE;YAAAN,QAAA,GACnDlB,IAAA,CAACH,IAAI;cAACmB,KAAK,EAAE;gBAAES,YAAY,EAAE;cAAG,CAAE;cAAAP,QAAA,EAAC;YAA0C,EAAO,EACpFlB,IAAA,CAACJ,MAAM;cAAC8B,KAAK,EAAC,KAAK;cAACC,OAAO,EAAE,SAAAA,QAAA;gBAAA,OAAMhB,oBAAoB,CAAC,IAAI,CAAC;cAAA;YAAC,EAAG,EACjEX,IAAA,CAACJ,MAAM;cAAC8B,KAAK,EAAC,IAAI;cAACC,OAAO,EAAE,SAAAA,QAAA;gBAAA,OAAMhB,oBAAoB,CAAC,KAAK,CAAC;cAAA;YAAC,EAAG;UAAA;QAC9D,EACJ;MAAA,EACH,EACRX,IAAA,CAACJ,MAAM;QAAC8B,KAAK,EAAC,cAAc;QAACC,OAAO,EAAElB;MAAc,EAAG;IAAA,EACpD;EAEf,CAAC;AACL;AAEJ,eAAeN,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}