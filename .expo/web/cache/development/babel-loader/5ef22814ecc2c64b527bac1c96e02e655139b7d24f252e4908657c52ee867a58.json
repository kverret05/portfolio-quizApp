{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { ButtonGroup } from 'react-native-elements';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function QuestionScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    question = _useState2[0],\n    setQuestion = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    score = _useState4[0],\n    setScore = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    selectedAnswer = _useState6[0],\n    setSelectedAnswer = _useState6[1];\n  var questions = [{\n    id: '1',\n    type: \"multiple-choice\",\n    prompt: 'This is a multiple choice question',\n    choices: ['A', 'B', 'C', 'D'],\n    correct: 0\n  }, {\n    id: '2',\n    type: \"multiple-answer\",\n    prompt: 'This is a multiple answer question',\n    choices: ['A', 'B', 'C', 'D'],\n    correct: [0, 2]\n  }, {\n    id: '3',\n    type: \"true-false\",\n    prompt: 'This is a true or false question',\n    choices: ['true', 'false'],\n    correct: 1\n  }];\n  var currentQuestion = questions[question];\n  var handleAnswerSelected = function handleAnswerSelected(index) {\n    var newSelectedAnswer = _toConsumableArray(selectedAnswer);\n    newSelectedAnswer[question] = index;\n    setSelectedAnswer(newSelectedAnswer);\n  };\n  var handleNextQuestion = function handleNextQuestion() {\n    if (question < questions.length - 1) {\n      setQuestion(question + 1);\n    } else {\n      navigation.navigate('Summary', {\n        score: score\n      });\n      setScore(score + 1);\n    }\n  };\n  return _jsxs(View, {\n    children: [_jsxs(Text, {\n      children: [\"Question \", question + 1]\n    }), _jsx(Text, {\n      children: currentQuestion.prompt\n    }), _jsx(ButtonGroup, {\n      buttons: currentQuestion.choices,\n      onPress: handleAnswerSelected,\n      selectedIndex: selectedAnswer[question],\n      testid: \"choices\",\n      vertical: true\n    }), _jsx(Button, {\n      title: \"Next\",\n      onPress: handleNextQuestion,\n      disabled: selectedAnswer[question] === undefined,\n      testID: \"next-question\"\n    })]\n  });\n}","map":{"version":3,"names":["React","useState","View","Text","Button","ButtonGroup","jsxs","_jsxs","jsx","_jsx","QuestionScreen","_ref","navigation","_useState","_useState2","_slicedToArray","question","setQuestion","_useState3","_useState4","score","setScore","_useState5","_useState6","selectedAnswer","setSelectedAnswer","questions","id","type","prompt","choices","correct","currentQuestion","handleAnswerSelected","index","newSelectedAnswer","_toConsumableArray","handleNextQuestion","length","navigate","children","buttons","onPress","selectedIndex","testid","vertical","title","disabled","undefined","testID"],"sources":["/Users/katverret/Documents/quizApp/screens/QuestionScreen.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { View, Text, Button } from 'react-native';\nimport { ButtonGroup } from 'react-native-elements';\n\nexport function QuestionScreen ({ navigation }) {\n    const [question, setQuestion] = useState(0);\n    const [score, setScore] = useState(0);\n    const [selectedAnswer, setSelectedAnswer] = useState('');\n  \n    // question array of three different types \n    let questions = [    \n        {   id: '1',\n            type: \"multiple-choice\",\n            prompt: 'This is a multiple choice question',     \n            choices: ['A', 'B', 'C', 'D'],\n            correct: 0,\n      },\n      {\n            id: '2',\n            type: \"multiple-answer\",\n            prompt: 'This is a multiple answer question',     \n            choices: ['A', 'B', 'C', 'D'],\n            correct: [0, 2]\n      },\n      {\n            id: '3',\n            type: \"true-false\",\n            prompt: 'This is a true or false question',     \n            choices: ['true', 'false'],\n            correct: 1\n      }\n    ];\n  \n    const currentQuestion = questions[question];\n\n    const handleAnswerSelected = (index) => {\n      const newSelectedAnswer = [...selectedAnswer];\n      newSelectedAnswer[question] = index;\n      setSelectedAnswer(newSelectedAnswer);\n    };\n\n    const handleNextQuestion = () => {\n      if (question < questions.length - 1) {\n        setQuestion(question + 1);\n      } else {\n        // sends user to Summary screen and sets score correct out of total score\n        navigation.navigate('Summary', { score });\n        setScore(score + 1);\n      }\n    };\n\n    return (\n      <View>\n        <Text>Question {question + 1}</Text>\n        <Text>{currentQuestion.prompt}</Text>\n        <ButtonGroup\n          buttons={currentQuestion.choices}\n          onPress={handleAnswerSelected}\n          selectedIndex={selectedAnswer[question]}\n          testid='choices'\n          vertical\n          // only thing that i am having problems w/ is having multiple buttons get pressed for the multiple answer array\n        />\n        <Button\n          title=\"Next\"\n          onPress={handleNextQuestion}\n          disabled={selectedAnswer[question] === undefined}\n          testID=\"next-question\"\n          // this ensures that users dont go back to the previous question and disables the next question button\n        />\n      </View>\n    );\n}\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}