{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { ButtonGroup } from 'react-native-elements';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar questionData = [{\n  type: \"multiple-choice\",\n  prompt: 'What is the fluttering sound made by a cat?',\n  choices: ['Roar', 'Oink', 'Purr', 'Buzzz'],\n  correct: 2\n}, {\n  type: \"multiple-answer\",\n  prompt: 'What cat breed is my favorite...?',\n  choices: ['Siamese Cat', 'Maine Coon', 'American Shorthair', 'Scottish Fold'],\n  correct: [2, 3]\n}, {\n  type: \"true-false\",\n  prompt: 'Cats are the best pets',\n  choices: ['true', 'false'],\n  correct: 0\n}];\nexport function QuestionScreen(_ref) {\n  var navigation = _ref.navigation,\n    route = _ref.route;\n  var _useState = useState(route.params.currentQuestionIndex),\n    _useState2 = _slicedToArray(_useState, 2),\n    question = _useState2[0],\n    setQuestion = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    score = _useState4[0],\n    setScore = _useState4[1];\n  var _useState5 = useState([]),\n    _useState6 = _slicedToArray(_useState5, 2),\n    selectedAnswer = _useState6[0],\n    setSelectedAnswer = _useState6[1];\n  var currentQuestion = questionData[question];\n  var type = currentQuestion.type,\n    prompt = currentQuestion.prompt,\n    choices = currentQuestion.choices;\n  var handleAnswerSelected = function handleAnswerSelected(index) {\n    var newSelectedAnswer = _toConsumableArray(selectedAnswer);\n    newSelectedAnswer[question] = index;\n    setSelectedAnswer(newSelectedAnswer);\n  };\n  var handleNextQuestion = function handleNextQuestion() {\n    if (question < questionData.length - 1) {\n      setQuestion(question + 1);\n    } else {\n      navigation.navigate('Summary', {\n        score: score,\n        userAnswers: selectedAnswer,\n        questionData: questionData\n      });\n    }\n  };\n  var handleMultipleAnswerSelected = function handleMultipleAnswerSelected(indexes) {\n    var newSelectedAnswer = _toConsumableArray(selectedAnswer);\n    newSelectedAnswer[question] = indexes;\n    setSelectedAnswer(newSelectedAnswer);\n  };\n  return _jsxs(View, {\n    children: [_jsxs(Text, {\n      children: [\"Question \", question + 1]\n    }), _jsx(Text, {\n      children: prompt\n    }), type === \"multiple-answer\" ? _jsx(ButtonGroup, {\n      testID: \"choices\",\n      buttons: choices,\n      onPress: handleMultipleAnswerSelected,\n      selectMultiple: true,\n      selectedIndexes: selectedAnswer[question],\n      vertical: true\n    }) : _jsx(ButtonGroup, {\n      testID: \"choices\",\n      buttons: choices,\n      onPress: handleAnswerSelected,\n      selectedIndex: selectedAnswer[question],\n      vertical: true\n    }), _jsx(Button, {\n      title: \"Next\",\n      onPress: handleNextQuestion,\n      disabled: selectedAnswer[question] === undefined,\n      testID: \"next-question\"\n    })]\n  });\n}","map":{"version":3,"names":["React","useState","View","Text","Button","ButtonGroup","jsxs","_jsxs","jsx","_jsx","questionData","type","prompt","choices","correct","QuestionScreen","_ref","navigation","route","_useState","params","currentQuestionIndex","_useState2","_slicedToArray","question","setQuestion","_useState3","_useState4","score","setScore","_useState5","_useState6","selectedAnswer","setSelectedAnswer","currentQuestion","handleAnswerSelected","index","newSelectedAnswer","_toConsumableArray","handleNextQuestion","length","navigate","userAnswers","handleMultipleAnswerSelected","indexes","children","testID","buttons","onPress","selectMultiple","selectedIndexes","vertical","selectedIndex","title","disabled","undefined"],"sources":["/Users/katverret/Documents/quizApp/screens/QuestionScreen.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { View, Text, Button } from 'react-native';\nimport { ButtonGroup } from 'react-native-elements';\n\n// Question array of three different types \nconst questionData = [\n  {\n    type: \"multiple-choice\",\n    prompt: 'What is the fluttering sound made by a cat?',\n    choices: ['Roar', 'Oink', 'Purr', 'Buzzz'],\n    correct: 2,\n  },\n  {\n    type: \"multiple-answer\",\n    prompt: 'What cat breed is my favorite...?',\n    choices: ['Siamese Cat', 'Maine Coon', 'American Shorthair', 'Scottish Fold'],\n    correct: [2, 3],\n  },\n  {\n    type: \"true-false\",\n    prompt: 'Cats are the best pets',\n    choices: ['true', 'false'],\n    correct: 0,\n  },\n];\n\n\nexport function QuestionScreen ({ navigation, route }) {\n  const [question, setQuestion] = useState(route.params.currentQuestionIndex);\n  const [score, setScore] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState([]);\n  const currentQuestion = questionData[question];\n  const { type, prompt, choices } = currentQuestion;\n\n\n  const handleAnswerSelected = (index) => {\n    const newSelectedAnswer = [...selectedAnswer];\n    newSelectedAnswer[question] = index;\n    setSelectedAnswer(newSelectedAnswer);\n  };\n\n  const handleNextQuestion = () => {\n    if (question < questionData.length - 1) {\n      setQuestion(question + 1);\n    } else {\n      navigation.navigate('Summary', { score, userAnswers: selectedAnswer, questionData });\n    }\n  };\n  \n\n  const handleMultipleAnswerSelected = (indexes) => {\n    const newSelectedAnswer = [...selectedAnswer];\n    newSelectedAnswer[question] = indexes;\n    setSelectedAnswer(newSelectedAnswer);\n  };\n\n  return (\n    <View>\n      <Text>Question {question + 1}</Text>\n      <Text>{prompt}</Text>\n      {type === \"multiple-answer\" ? (\n        <ButtonGroup\n          testID=\"choices\"\n          buttons={choices}\n          onPress={handleMultipleAnswerSelected}\n          selectMultiple\n          selectedIndexes={selectedAnswer[question]}\n          vertical\n        />\n      ) : (\n        <ButtonGroup\n          testID=\"choices\"\n          buttons={choices}\n          onPress={handleAnswerSelected}\n          selectedIndex={selectedAnswer[question]}\n          vertical\n        />\n      )}\n      <Button\n        title=\"Next\"\n        onPress={handleNextQuestion}\n        disabled={selectedAnswer[question] === undefined}\n        testID=\"next-question\"\n        // this ensures that users don't go back to the previous question and disables the next question button\n      />\n    </View>\n  );\n}\n\n\n\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}