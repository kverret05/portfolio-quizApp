{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction HintMessage(props) {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    hintRequested = _useState2[0],\n    setHintRequested = _useState2[1];\n  return _jsx(View, {\n    children: props.hintText && hintRequested ? _jsx(Modal, {\n      animationType: \"slide\",\n      transparent: false,\n      visible: hintRequested,\n      children: _jsx(View, {\n        style: {\n          marginTop: 22\n        },\n        children: _jsxs(View, {\n          children: [_jsx(Text, {\n            children: props.hintText\n          }), _jsx(TouchableHighlight, {\n            onPress: function onPress() {\n              return setHintRequested(false);\n            },\n            children: _jsx(Text, {\n              children: \"Hide Hint? \"\n            })\n          })]\n        })\n      })\n    }) : _jsx(TouchableHighlight, {\n      onPress: function onPress() {\n        return setHintRequested(true);\n      },\n      children: _jsx(Text, {\n        children: \"Show Hint?\"\n      })\n    })\n  });\n}\nexport default HintMessage;","map":{"version":3,"names":["React","useState","Modal","Text","TouchableHighlight","View","jsx","_jsx","jsxs","_jsxs","HintMessage","props","_useState","_useState2","_slicedToArray","hintRequested","setHintRequested","children","hintText","animationType","transparent","visible","style","marginTop","onPress"],"sources":["/Users/katverret/Documents/quizApp/components/HintMessage.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Modal, Text, TouchableHighlight, View } from \"react-native\";\n\nfunction HintMessage(props) {\n  const [hintRequested, setHintRequested] = useState(false);\n\n  return (\n    <View>\n      {props.hintText && hintRequested ? (\n        <Modal animationType=\"slide\" transparent={false} visible={hintRequested}>\n          <View style={{ marginTop: 22 }}>\n            <View>\n              <Text>{props.hintText}</Text>\n\n              <TouchableHighlight onPress={() => setHintRequested(false)}>\n                <Text>Hide Hint? </Text>\n              </TouchableHighlight>\n            </View>\n          </View>\n        </Modal>\n      ) : (\n        <TouchableHighlight onPress={() => setHintRequested(true)}>\n          <Text>Show Hint?</Text>\n        </TouchableHighlight>\n      )}\n    </View>\n  );\n}\n\nexport default HintMessage;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,KAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,kBAAA;AAAA,OAAAC,IAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAGxC,SAASC,WAAWA,CAACC,KAAK,EAAE;EAC1B,IAAAC,SAAA,GAA0CX,QAAQ,CAAC,KAAK,CAAC;IAAAY,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAlDG,aAAa,GAAAF,UAAA;IAAEG,gBAAgB,GAAAH,UAAA;EAEtC,OACEN,IAAA,CAACF,IAAI;IAAAY,QAAA,EACFN,KAAK,CAACO,QAAQ,IAAIH,aAAa,GAC9BR,IAAA,CAACL,KAAK;MAACiB,aAAa,EAAC,OAAO;MAACC,WAAW,EAAE,KAAM;MAACC,OAAO,EAAEN,aAAc;MAAAE,QAAA,EACtEV,IAAA,CAACF,IAAI;QAACiB,KAAK,EAAE;UAAEC,SAAS,EAAE;QAAG,CAAE;QAAAN,QAAA,EAC7BR,KAAA,CAACJ,IAAI;UAAAY,QAAA,GACHV,IAAA,CAACJ,IAAI;YAAAc,QAAA,EAAEN,KAAK,CAACO;UAAQ,EAAQ,EAE7BX,IAAA,CAACH,kBAAkB;YAACoB,OAAO,EAAE,SAAAA,QAAA;cAAA,OAAMR,gBAAgB,CAAC,KAAK,CAAC;YAAA,CAAC;YAAAC,QAAA,EACzDV,IAAA,CAACJ,IAAI;cAAAc,QAAA,EAAC;YAAW;UAAO,EACL;QAAA;MAChB;IACF,EACD,GAERV,IAAA,CAACH,kBAAkB;MAACoB,OAAO,EAAE,SAAAA,QAAA;QAAA,OAAMR,gBAAgB,CAAC,IAAI,CAAC;MAAA,CAAC;MAAAC,QAAA,EACxDV,IAAA,CAACJ,IAAI;QAAAc,QAAA,EAAC;MAAU;IAAO;EAE1B,EACI;AAEX;AAEA,eAAeP,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}