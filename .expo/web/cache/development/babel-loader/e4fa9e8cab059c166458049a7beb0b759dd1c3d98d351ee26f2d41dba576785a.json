{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from \"react\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Button, Text } from \"react-native-elements\";\nimport { styles } from \"../App\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction RestartQuiz(_ref) {\n  var setQuizState = _ref.setQuizState;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    confirmRestart = _useState2[0],\n    setConfirmRestart = _useState2[1];\n  var handleRestart = function handleRestart() {\n    setConfirmRestart(true);\n  };\n  var handleConfirmRestart = function handleConfirmRestart(confirmed) {\n    if (confirmed) {\n      setQuizState({\n        currentQuestions: 0,\n        userChoices: [],\n        showSummary: false\n      });\n      setConfirmRestart(false);\n    } else {\n      setConfirmRestart(false);\n    }\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Modal, {\n      visible: confirmRestart,\n      animationType: \"slide\",\n      transparent: true,\n      onRequestClose: function onRequestClose() {\n        return handleConfirmRestart(false);\n      },\n      children: _jsx(View, {\n        style: {\n          flex: 1,\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        children: _jsxs(View, {\n          style: {\n            backgroundColor: \"white\",\n            padding: 20\n          },\n          children: [_jsx(Text, {\n            style: {\n              marginBottom: 10\n            },\n            children: \"Are you sure you want to restart the quiz?\"\n          }), _jsx(Button, {\n            title: \"Yes\",\n            onPress: function onPress() {\n              return handleConfirmRestart(true);\n            }\n          }), _jsx(Button, {\n            title: \"No\",\n            onPress: function onPress() {\n              return handleConfirmRestart(false);\n            }\n          })]\n        })\n      })\n    }), _jsx(Button, {\n      title: \"Restart Quiz\",\n      onPress: handleRestart\n    })]\n  });\n}\nexport default RestartQuiz;","map":{"version":3,"names":["useState","Modal","View","Button","Text","styles","jsx","_jsx","jsxs","_jsxs","RestartQuiz","_ref","setQuizState","_useState","_useState2","_slicedToArray","confirmRestart","setConfirmRestart","handleRestart","handleConfirmRestart","confirmed","currentQuestions","userChoices","showSummary","style","container","children","visible","animationType","transparent","onRequestClose","flex","justifyContent","alignItems","backgroundColor","padding","marginBottom","title","onPress"],"sources":["/Users/katverret/Documents/quizApp/components/RestartQuiz.js"],"sourcesContent":["import { useState } from \"react\";\nimport { Modal, View } from \"react-native\";\nimport { Button, Text } from \"react-native-elements\";\nimport { styles } from \"../App\";\n\nfunction RestartQuiz({ setQuizState }) {\n  const [confirmRestart, setConfirmRestart] = useState(false);\n\n  let handleRestart = () => {\n    setConfirmRestart(true);\n  };\n\n  let handleConfirmRestart = (confirmed) => {\n    if (confirmed) {\n      setQuizState({\n        currentQuestions: 0,\n        userChoices: [],\n        showSummary: false,\n      });\n      setConfirmRestart(false);\n    } else {\n      setConfirmRestart(false);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Modal\n        visible={confirmRestart}\n        animationType=\"slide\"\n        transparent={true}\n        onRequestClose={() => handleConfirmRestart(false)}\n      >\n        <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\n          <View style={{ backgroundColor: \"white\", padding: 20 }}>\n            <Text style={{ marginBottom: 10 }}>\n              Are you sure you want to restart the quiz?\n            </Text>\n            <Button title=\"Yes\" onPress={() => handleConfirmRestart(true)} />\n            <Button title=\"No\" onPress={() => handleConfirmRestart(false)} />\n          </View>\n        </View>\n      </Modal>\n      <Button title=\"Restart Quiz\" onPress={handleRestart} />\n    </View>\n  );\n}\n\nexport default RestartQuiz;\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAC,OAAAC,KAAA;AAAA,OAAAC,IAAA;AAEjC,SAASC,MAAM,EAAEC,IAAI,QAAQ,uBAAuB;AACpD,SAASC,MAAM;AAAiB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEhC,SAASC,WAAWA,CAAAC,IAAA,EAAmB;EAAA,IAAhBC,YAAY,GAAAD,IAAA,CAAZC,YAAY;EACjC,IAAAC,SAAA,GAA4Cb,QAAQ,CAAC,KAAK,CAAC;IAAAc,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAApDG,cAAc,GAAAF,UAAA;IAAEG,iBAAiB,GAAAH,UAAA;EAExC,IAAII,aAAa,GAAG,SAAhBA,aAAaA,CAAA,EAAS;IACxBD,iBAAiB,CAAC,IAAI,CAAC;EACzB,CAAC;EAED,IAAIE,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAIC,SAAS,EAAK;IACxC,IAAIA,SAAS,EAAE;MACbR,YAAY,CAAC;QACXS,gBAAgB,EAAE,CAAC;QACnBC,WAAW,EAAE,EAAE;QACfC,WAAW,EAAE;MACf,CAAC,CAAC;MACFN,iBAAiB,CAAC,KAAK,CAAC;IAC1B,CAAC,MAAM;MACLA,iBAAiB,CAAC,KAAK,CAAC;IAC1B;EACF,CAAC;EAED,OACER,KAAA,CAACP,IAAI;IAACsB,KAAK,EAAEnB,MAAM,CAACoB,SAAU;IAAAC,QAAA,GAC5BnB,IAAA,CAACN,KAAK;MACJ0B,OAAO,EAAEX,cAAe;MACxBY,aAAa,EAAC,OAAO;MACrBC,WAAW,EAAE,IAAK;MAClBC,cAAc,EAAE,SAAAA,eAAA;QAAA,OAAMX,oBAAoB,CAAC,KAAK,CAAC;MAAA,CAAC;MAAAO,QAAA,EAElDnB,IAAA,CAACL,IAAI;QAACsB,KAAK,EAAE;UAAEO,IAAI,EAAE,CAAC;UAAEC,cAAc,EAAE,QAAQ;UAAEC,UAAU,EAAE;QAAS,CAAE;QAAAP,QAAA,EACvEjB,KAAA,CAACP,IAAI;UAACsB,KAAK,EAAE;YAAEU,eAAe,EAAE,OAAO;YAAEC,OAAO,EAAE;UAAG,CAAE;UAAAT,QAAA,GACrDnB,IAAA,CAACH,IAAI;YAACoB,KAAK,EAAE;cAAEY,YAAY,EAAE;YAAG,CAAE;YAAAV,QAAA,EAAC;UAEnC,EAAO,EACPnB,IAAA,CAACJ,MAAM;YAACkC,KAAK,EAAC,KAAK;YAACC,OAAO,EAAE,SAAAA,QAAA;cAAA,OAAMnB,oBAAoB,CAAC,IAAI,CAAC;YAAA;UAAC,EAAG,EACjEZ,IAAA,CAACJ,MAAM;YAACkC,KAAK,EAAC,IAAI;YAACC,OAAO,EAAE,SAAAA,QAAA;cAAA,OAAMnB,oBAAoB,CAAC,KAAK,CAAC;YAAA;UAAC,EAAG;QAAA;MAC5D;IACF,EACD,EACRZ,IAAA,CAACJ,MAAM;MAACkC,KAAK,EAAC,cAAc;MAACC,OAAO,EAAEpB;IAAc,EAAG;EAAA,EAClD;AAEX;AAEA,eAAeR,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}