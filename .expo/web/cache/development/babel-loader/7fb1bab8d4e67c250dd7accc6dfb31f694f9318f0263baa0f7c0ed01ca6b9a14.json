{"ast":null,"code":"import React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { CheckBox } from 'react-native-elements';\nimport { styles } from \"../App\";\nimport RestartQuiz from \"./RestartQuiz\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction Summary(_ref) {\n  var route = _ref.route;\n  var setQuizState = route.params.setQuizState;\n  var calculateCorrect = function calculateCorrect(userSelected, correct, type) {\n    var userCorrect = false;\n    if (type === \"multiple-answer\") {\n      userCorrect = userSelected.sort().toString() === correct.sort().toString();\n    } else {\n      userCorrect = userSelected === correct;\n    }\n    return userCorrect;\n  };\n  var calculateCorrectSet = function calculateCorrectSet(userSelected, correct, type) {\n    var userCorrect = false;\n    if (type === \"multiple-answer\") {\n      userCorrect = correct.every(function (item) {\n        return userSelected.includes(item);\n      }) && userSelected.every(function (item) {\n        return correct.includes(item);\n      });\n    } else {\n      userCorrect = userSelected === correct;\n    }\n    return userCorrect;\n  };\n  var totalScore = 0;\n  for (var i = 0; i < route.params.questionData.length; i++) {\n    var userSelected = route.params.userChoices[i];\n    var correct = route.params.questionData[i].correct;\n    var type = route.params.questionData[i].type;\n    var userCorrect = calculateCorrect(userSelected, correct, type);\n    if (userCorrect) {\n      totalScore++;\n    }\n  }\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(FlatList, {\n      data: route.params.questionData,\n      renderItem: function renderItem(_ref2) {\n        var item = _ref2.item,\n          index = _ref2.index;\n        var choices = item.choices,\n          prompt = item.prompt,\n          type = item.type,\n          correct = item.correct;\n        var userSelected = route.params.userChoices[index];\n        var userCorrect = calculateCorrect(userSelected, correct, type);\n        var userCorrectSet = calculateCorrectSet(userSelected, correct, type);\n        return _jsxs(View, {\n          children: [_jsx(Text, {\n            children: prompt\n          }), choices.map(function (value, choiceIndex) {\n            var incorrect = false;\n            var userDidSelect = false;\n            if (type === \"multiple-answer\") {\n              userDidSelect = userSelected.includes(choiceIndex);\n              incorrect = userSelected && !correct.includes(choiceIndex) && userSelected.includes(choiceIndex);\n            } else {\n              incorrect = userSelected !== correct;\n              incorrect = userSelected && userSelected !== correct;\n            }\n            return _jsx(CheckBox, {\n              containerStyle: {\n                backgroundColor: userDidSelect ? incorrect === false ? \"green\" : \"gray\" : undefined\n              },\n              checked: type === \"multiple-answer\" ? correct.includes(choiceIndex) : correct === choiceIndex,\n              textStyle: {\n                textDecorationLine: incorrect || !userCorrectSet ? \"line-through\" : undefined\n              },\n              title: value\n            }, value);\n          })]\n        }, index);\n      }\n    }), _jsxs(View, {\n      children: [_jsxs(Text, {\n        children: [\" Score: \", totalScore, \" \"]\n      }), _jsx(RestartQuiz, {\n        setQuizState: setQuizState\n      })]\n    })]\n  });\n}\nexport default Summary;","map":{"version":3,"names":["React","View","Text","FlatList","CheckBox","styles","RestartQuiz","jsx","_jsx","jsxs","_jsxs","Summary","_ref","route","setQuizState","params","calculateCorrect","userSelected","correct","type","userCorrect","sort","toString","calculateCorrectSet","every","item","includes","totalScore","i","questionData","length","userChoices","style","container","children","data","renderItem","_ref2","index","choices","prompt","userCorrectSet","map","value","choiceIndex","incorrect","userDidSelect","containerStyle","backgroundColor","undefined","checked","textStyle","textDecorationLine","title"],"sources":["/Users/katverret/Documents/quizApp/components/Summary.js"],"sourcesContent":["import React from 'react';\nimport { View, Text, FlatList } from 'react-native';\nimport { CheckBox } from 'react-native-elements';\nimport { styles } from '../App';\nimport RestartQuiz from './RestartQuiz';\n\nfunction Summary({ route}) {\n  const { setQuizState } = route.params;\n\n  let calculateCorrect = (userSelected, correct, type) => {\n    let userCorrect = false;\n    if (type === \"multiple-answer\") {\n      userCorrect = userSelected.sort().toString() === correct.sort().toString();\n    } else {\n      userCorrect = userSelected === correct;\n    }\n    return userCorrect;\n  };\n\n  let calculateCorrectSet = (userSelected, correct, type) => {\n    let userCorrect = false;\n    if (type === \"multiple-answer\") {\n      userCorrect = correct.every((item) => userSelected.includes(item)) &&\n        userSelected.every((item) => correct.includes(item));\n    } else {\n      userCorrect = userSelected === correct;\n    }\n    return userCorrect;\n  };\n\n  let totalScore = 0;\n  for (let i = 0; i < route.params.questionData.length; i++) {\n    let userSelected = route.params.userChoices[i];\n    let correct = route.params.questionData[i].correct;\n    let type = route.params.questionData[i].type;\n    let userCorrect = calculateCorrect(userSelected, correct, type);\n\n    if (userCorrect) {\n      totalScore++;\n    }\n  }\n\n  return (\n    <View style={styles.container}>\n      <FlatList\n        data={route.params.questionData}\n        renderItem={({ item, index }) => {\n          let { choices, prompt, type, correct } = item;\n          let userSelected = route.params.userChoices[index];\n          let userCorrect = calculateCorrect(\n            userSelected, correct, type)\n          let userCorrectSet = calculateCorrectSet(\n            userSelected, correct, type)\n\n          return (\n            <View key={index}>\n              <Text>{prompt}</Text>\n              {choices.map((value, choiceIndex) => {\n                let incorrect = false\n                let userDidSelect = false\n\n                if (type === \"multiple-answer\") {\n                  userDidSelect = userSelected.includes(choiceIndex);\n                  incorrect =\n                    userSelected &&\n                    !correct.includes(choiceIndex) &&\n                    userSelected.includes(choiceIndex);\n                } else {\n                  incorrect = userSelected !== correct;\n                  incorrect = userSelected\n                    && userSelected !== correct\n                }\n                return (\n                  <CheckBox\n                    containerStyle={{\n                      backgroundColor: userDidSelect\n                        ? incorrect === false\n                          ? \"green\"\n                          : \"gray\"\n                        : undefined,\n                    }}\n                    checked={\n                      type === \"multiple-answer\"\n                        ? correct.includes(choiceIndex)\n                        : correct === choiceIndex\n                    }\n                    textStyle={{\n                      textDecorationLine: incorrect || !userCorrectSet\n                        ? \"line-through\"\n                        : undefined,\n                    }}\n                    key={value}\n                    title={value}\n                  />\n                );\n              })}\n            </View>\n          );\n        }}\n      />\n      <View>\n        <Text> Score: {totalScore} </Text>\n        <RestartQuiz setQuizState={setQuizState} />\n      </View>\n    </View>\n  );\n}\n\nexport default Summary;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}