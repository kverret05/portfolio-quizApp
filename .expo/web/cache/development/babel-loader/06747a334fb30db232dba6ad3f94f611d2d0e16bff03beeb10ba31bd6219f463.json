{"ast":null,"code":"import React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function SummaryScreen(_ref) {\n  var route = _ref.route;\n  var _route$params = route.params,\n    userAnswers = _route$params.userAnswers,\n    questionData = _route$params.questionData;\n  var correctAnswers = questionData.map(function (question) {\n    return question.correctAnswer;\n  });\n  return _jsx(Summary, {\n    userAnswers: userAnswers,\n    correctAnswers: correctAnswers,\n    questions: questions\n  });\n}\nexport function Summary(_ref2) {\n  var userAnswers = _ref2.userAnswers,\n    correctAnswers = _ref2.correctAnswers;\n  var totalScore = userAnswers.reduce(function (score, answer, index) {\n    if (answer === correctAnswers[index]) {\n      return score + 1;\n    }\n    return score;\n  }, 0);\n  return _jsxs(View, {\n    children: [_jsxs(Text, {\n      testID: \"total\",\n      children: [\"Total score: \", totalScore, \"/\", userAnswers.length]\n    }), _jsx(View, {\n      children: userAnswers.map(function (answer, index) {\n        return _jsxs(View, {\n          children: [_jsxs(Text, {\n            children: [\"Question \", index + 1]\n          }), _jsxs(Text, {\n            children: [\"User answer: \", answer]\n          }), _jsxs(Text, {\n            children: [\"Correct answer: \", correctAnswers[index]]\n          }), answer === correctAnswers[index] ? _jsx(Text, {\n            style: {\n              color: 'green',\n              fontWeight: 'bold'\n            },\n            children: \"Correct\"\n          }) : _jsxs(Text, {\n            style: {\n              color: 'red',\n              textDecorationLine: 'line-through',\n              textDecorationStyle: 'solid'\n            },\n            children: [\"Incorrect (correct answer is \", correctAnswers[index], \")\"]\n          })]\n        }, index);\n      })\n    })]\n  });\n}","map":{"version":3,"names":["React","View","Text","jsx","_jsx","jsxs","_jsxs","SummaryScreen","_ref","route","_route$params","params","userAnswers","questionData","correctAnswers","map","question","correctAnswer","Summary","questions","_ref2","totalScore","reduce","score","answer","index","children","testID","length","style","color","fontWeight","textDecorationLine","textDecorationStyle"],"sources":["/Users/katverret/Documents/quizApp/screens/SummaryScreen.js"],"sourcesContent":["import React from 'react';\nimport { View, Text } from 'react-native';\n\nexport function SummaryScreen({ route }) {\n  const { userAnswers, questionData } = route.params;\n  const correctAnswers = questionData.map(question => question.correctAnswer);\n\n  return <Summary userAnswers={userAnswers} correctAnswers={correctAnswers} questions={questions} />;\n}\n\nexport function Summary({ userAnswers, correctAnswers }) {\n  const totalScore = userAnswers.reduce((score, answer, index) => {\n    if (answer === correctAnswers[index]) {\n      return score + 1;\n    }\n    return score;\n  }, 0);\n\n  return (\n    <View>\n      <Text testID=\"total\">Total score: {totalScore}/{userAnswers.length}</Text>\n      <View>\n        {userAnswers.map((answer, index) => (\n          <View key={index}>\n            <Text>Question {index + 1}</Text>\n            <Text>User answer: {answer}</Text>\n            <Text>Correct answer: {correctAnswers[index]}</Text>\n            {answer === correctAnswers[index] ? (\n              <Text style={{ color: 'green', fontWeight: 'bold' }}>Correct</Text>\n            ) : (\n              <Text style={{ color: 'red', textDecorationLine: 'line-through', textDecorationStyle: 'solid' }}>\n                Incorrect (correct answer is {correctAnswers[index]})\n              </Text>\n            )}\n          </View>\n        ))}\n      </View>\n    </View>\n  );\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAG1B,OAAO,SAASC,aAAaA,CAAAC,IAAA,EAAY;EAAA,IAATC,KAAK,GAAAD,IAAA,CAALC,KAAK;EACnC,IAAAC,aAAA,GAAsCD,KAAK,CAACE,MAAM;IAA1CC,WAAW,GAAAF,aAAA,CAAXE,WAAW;IAAEC,YAAY,GAAAH,aAAA,CAAZG,YAAY;EACjC,IAAMC,cAAc,GAAGD,YAAY,CAACE,GAAG,CAAC,UAAAC,QAAQ;IAAA,OAAIA,QAAQ,CAACC,aAAa;EAAA,EAAC;EAE3E,OAAOb,IAAA,CAACc,OAAO;IAACN,WAAW,EAAEA,WAAY;IAACE,cAAc,EAAEA,cAAe;IAACK,SAAS,EAAEA;EAAU,EAAG;AACpG;AAEA,OAAO,SAASD,OAAOA,CAAAE,KAAA,EAAkC;EAAA,IAA/BR,WAAW,GAAAQ,KAAA,CAAXR,WAAW;IAAEE,cAAc,GAAAM,KAAA,CAAdN,cAAc;EACnD,IAAMO,UAAU,GAAGT,WAAW,CAACU,MAAM,CAAC,UAACC,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAK;IAC9D,IAAID,MAAM,KAAKV,cAAc,CAACW,KAAK,CAAC,EAAE;MACpC,OAAOF,KAAK,GAAG,CAAC;IAClB;IACA,OAAOA,KAAK;EACd,CAAC,EAAE,CAAC,CAAC;EAEL,OACEjB,KAAA,CAACL,IAAI;IAAAyB,QAAA,GACHpB,KAAA,CAACJ,IAAI;MAACyB,MAAM,EAAC,OAAO;MAAAD,QAAA,GAAC,eAAa,EAACL,UAAU,EAAC,GAAC,EAACT,WAAW,CAACgB,MAAM;IAAA,EAAQ,EAC1ExB,IAAA,CAACH,IAAI;MAAAyB,QAAA,EACFd,WAAW,CAACG,GAAG,CAAC,UAACS,MAAM,EAAEC,KAAK;QAAA,OAC7BnB,KAAA,CAACL,IAAI;UAAAyB,QAAA,GACHpB,KAAA,CAACJ,IAAI;YAAAwB,QAAA,GAAC,WAAS,EAACD,KAAK,GAAG,CAAC;UAAA,EAAQ,EACjCnB,KAAA,CAACJ,IAAI;YAAAwB,QAAA,GAAC,eAAa,EAACF,MAAM;UAAA,EAAQ,EAClClB,KAAA,CAACJ,IAAI;YAAAwB,QAAA,GAAC,kBAAgB,EAACZ,cAAc,CAACW,KAAK,CAAC;UAAA,EAAQ,EACnDD,MAAM,KAAKV,cAAc,CAACW,KAAK,CAAC,GAC/BrB,IAAA,CAACF,IAAI;YAAC2B,KAAK,EAAE;cAAEC,KAAK,EAAE,OAAO;cAAEC,UAAU,EAAE;YAAO,CAAE;YAAAL,QAAA,EAAC;UAAO,EAAO,GAEnEpB,KAAA,CAACJ,IAAI;YAAC2B,KAAK,EAAE;cAAEC,KAAK,EAAE,KAAK;cAAEE,kBAAkB,EAAE,cAAc;cAAEC,mBAAmB,EAAE;YAAQ,CAAE;YAAAP,QAAA,GAAC,+BAClE,EAACZ,cAAc,CAACW,KAAK,CAAC,EAAC,GACtD;UAAA,EACD;QAAA,GAVQA,KAAK,CAWT;MAAA,CACR;IAAC,EACG;EAAA,EACF;AAEX"},"metadata":{},"sourceType":"module","externalDependencies":[]}